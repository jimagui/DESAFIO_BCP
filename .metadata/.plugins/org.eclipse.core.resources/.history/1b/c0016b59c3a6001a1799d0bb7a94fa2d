package com.pe.desafio.bcp.controller;

import java.util.List;
import java.util.Observable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pe.desafio.bcp.dto.ConversionDto;
import com.pe.desafio.bcp.entity.TipoCambio;
import com.pe.desafio.bcp.observer.TipoCambioConversion;
import com.pe.desafio.bcp.repository.TipoCambioRepository;
import com.pe.desafio.bcp.service.TipoCambioService;

import rx.Single;

@RestController
public class TipoCambioController {
    
	@Autowired
	private TipoCambioService tipoCambioService;
	
	@Autowired
	private TipoCambioRepository tipoCambioRepository;
	
	@RequestMapping("/")
    public String home(){
        return "Hello World!";
    }
	
	@GetMapping("/conversion")
	public ConversionDto getAllConversion(){
		
		//Observable<List<TipoCambio>> = tipoCambioService.obtenerTipoCambio(monto, monedaOrigen, monedaDestino);
		System.out.println("getAllConversion");
		ConversionDto conversionDto = new ConversionDto();
		conversionDto.setMonto(10.0);
		conversionDto.setMonedaDestino("SOLES");
		conversionDto.setMonedaDestino("DOLARES");
		conversionDto.setMontoCambio(33.0);
		conversionDto.setTipoCambio(3.3);
		//retornar√° al usuario con id pasado en la url
		return conversionDto;
	}
	
	@GetMapping("/conversion/{monto}/{monedaOrigen}/{monedaDestino}")
	public ConversionDto  getConversion( @PathVariable double monto,
										@PathVariable String monedaOrigen,
										@PathVariable String monedaDestino){

		System.out.println("getConversion");
		ConversionDto conversionDto = new ConversionDto();
		conversionDto.setMonedaOrigen(monedaOrigen);
		conversionDto.setMonedaDestino(monedaDestino);
		conversionDto.setMonto(monto);
		
		rx.Observable<TipoCambio> observable = rx.Observable.just(tipoCambioRepository.findTipoCambio(monedaOrigen, monedaDestino));
		observable.subscribe(resultado -> {
			conversionDto.setTipoCambio(resultado.getTipoCambio());
			conversionDto.setMontoCambio(Math.round(monto * resultado.getTipoCambio()) );
		});
		
		
		
		return conversionDto;
	}
}
