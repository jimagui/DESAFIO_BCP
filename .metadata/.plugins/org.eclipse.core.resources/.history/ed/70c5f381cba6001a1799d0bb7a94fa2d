package com.pe.desafio.bcp.controller;


import javax.ws.rs.POST;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pe.desafio.bcp.dto.ConversionDto;
import com.pe.desafio.bcp.entity.TipoCambio;
import com.pe.desafio.bcp.repository.TipoCambioRepository;
import com.pe.desafio.bcp.service.TipoCambioService;


@RestController
public class TipoCambioController {
    
	@Autowired
	private TipoCambioService tipoCambioService;
	
	@Autowired
	private TipoCambioRepository tipoCambioRepository;
	
	@RequestMapping("/")
    public String home(){
        return "Hello World!";
    }
	
	@PutMapping("/tipoCambio")
	public TipoCambio actualizar(@RequestBody TipoCambio tipoCambioNuevo, @PathVariable Integer id) {
		
		 return tipoCambioRepository.findById(id)
			      .map(tipoCambio -> {
			    	  tipoCambio.setTipoCambio(tipoCambioNuevo.getTipoCambio());
			    	  tipoCambio.setCodigoDestino(tipoCambioNuevo.getCodigoDestino());
			        return repository.save(employee);
			      })
			      .orElseGet(() -> {
			        newEmployee.setId(id);
			        return repository.save(newEmployee);
			      });
		 
	
	}
	
	@GetMapping("/conversion/{monto}/{monedaOrigen}/{monedaDestino}")
	public ConversionDto  getConversion( @PathVariable double monto,
										@PathVariable String monedaOrigen,
										@PathVariable String monedaDestino){

		System.out.println("getConversion");
		ConversionDto conversionDto = new ConversionDto();
		conversionDto.setMonedaOrigen(monedaOrigen);
		conversionDto.setMonedaDestino(monedaDestino);
		conversionDto.setMonto(monto);
		
		rx.Observable<TipoCambio> observable = rx.Observable.just(tipoCambioRepository.findTipoCambio(monedaOrigen, monedaDestino));
		observable.subscribe(resultado -> {
			conversionDto.setTipoCambio(resultado.getTipoCambio());
			conversionDto.setMontoCambio(Math.round(monto * resultado.getTipoCambio()) );
		});
		
		
		
		return conversionDto;
	}
}
