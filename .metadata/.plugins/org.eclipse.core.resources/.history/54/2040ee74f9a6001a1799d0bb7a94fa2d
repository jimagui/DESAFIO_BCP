package com.pe.desafio.bcp.controller;


import org.apache.commons.math3.util.Precision;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.pe.desafio.bcp.dto.ConversionDto;
import com.pe.desafio.bcp.entity.TipoCambio;
import com.pe.desafio.bcp.service.TipoCambioService;



@RestController
public class ConversionController {
    
	
	@Autowired
	private TipoCambioService tipoCambioService;
	
	
	@GetMapping("/conversion/{monto}/{monedaOrigen}/{monedaDestino}")
	public ConversionDto  getConversion( @PathVariable double monto,
										 @PathVariable String monedaOrigen,
										 @PathVariable String monedaDestino){

		ConversionDto conversionDto = new ConversionDto();
		conversionDto.setMonedaOrigen(monedaOrigen);
		conversionDto.setMonedaDestino(monedaDestino);
		conversionDto.setMonto(monto);
		
		rx.Observable<TipoCambio> observable = rx.Observable.just(tipoCambioService.obtenerTipoCambio(monedaOrigen, monedaDestino));
		observable.subscribe(resultado ->   {
												conversionDto.setTipoCambio(resultado.getTipoCambio());
												conversionDto.setMontoCambio(Precision.round(monto * resultado.getTipoCambio(),2));
												System.out.println("termino de cargar");
											},
				             error -> {System.out.println(error.getMessage());
				                       error.printStackTrace();   
				                      },
				             ()    -> System.out.println("TERMINADO")
		);
		observable.subscribe(new TipoCambioConversion());
		
		System.out.println("cargando...");
		return conversionDto;
	}
}
